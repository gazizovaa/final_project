§
    Asuh?ª  ã            	       óÈ  — d Z ddlZddlmZ ddlZddlZddlZddlZddl Z ddlZddl	Z	ddl
Z
ddl
Z
ddlZddl
Z
ddlZddlZddlZddlZddlZddlmZ ddlmZ 	 ddlmZ n
# e$ r Y nw xY wej        Zej        Zej        Zej        Z ej        Z!ej"        Z#ej$        Z%d Z&d e
j'        d	¦  «        d
z  z  d
z
  Z(dZ)d
Z*ej+         ,                    dd¦  «        Z-da.da/dddddddœZ0dddddœZ1 G d„ dej2        ¦  «        Z3 G d„ dej2        ¦  «        Z4 G d„ dej5        ¦  «        Z6 G d „ d!¦  «        Z7 G d"„ d#ej2        ¦  «        Z8 ej9        d$d%d&d'¬(¦  «        Z: ej9        d)d%d*d'¬(¦  «        Z; ej<        d+ ej=        d,d-¦  «        d.d'¬(¦  «        Z> ej?         e3d/d0d1d2d'¬3¦  «        ¦  «        Z@ ej?         e4d4i d5¦  «        ¦  «        ZA ej?         e8d6dd7d'¬8¦  «        ¦  «        ZB ej9        d9d'd:¦  «        ZCd;„ ZDd<„ ZEd=„ ZFd>„ ZGd?„ ZHd@„ ZIdA„ ZJdB„ ZKdC„ ZLd'dDœdE„ZMdF„ ZNi ZOdG„ ZPd%dHœdI„ZQi ZRdJ„ ZSd%dHœdK„ZTd%dHœdL„ZUdM„ ZVdN„ ZWdO„ ZXdP„ ZYdQ„ ZZdR„ Z[dS„ Z\dT„ Z]e]Z^dU„ Z_e#fdV„Z`dkdW„ZadldX„ZbdY„ ZcdZ„ Zdd[„ Zed\„ Zfd'ag G d]„ d^e jh        ¦  «        Zi G d_„ d`e jj        ¦  «        Zk G da„ dbe jl        ¦  «        Zm G dc„ dd e jn        ¦   «         ¦  «        Zode„ Zpdf„ Zqdg„ Zrdmdh„Zsd%atdi„ Zudj„ Zv ev¦   «          dS )na%  Abseil Python logging module implemented on top of standard logging.

Simple usage::

    from absl import logging

    logging.info('Interesting Stuff')
    logging.info('Interesting Stuff with Arguments: %d', 42)

    logging.set_verbosity(logging.INFO)
    logging.log(logging.DEBUG, 'This will *not* be printed')
    logging.set_verbosity(logging.DEBUG)
    logging.log(logging.DEBUG, 'This will be printed')

    logging.warning('Worrying Stuff')
    logging.error('Alarming Stuff')
    logging.fatal('AAAAHHHHH!!!!')  # Process exits.

Usage note: Do not pre-format the strings in your program code.
Instead, let the logging module perform argument interpolation.
This saves cycles because strings that don't need to be printed
are never formatted.  Note that this module does not attempt to
interpolate arguments when no arguments are given.  In other words::

    logging.info('Interesting Stuff: %s')

does not raise an exception because logging.info() has only one
argument, the message string.

"Lazy" evaluation for debugging
-------------------------------

If you do something like this::

    logging.debug('Thing: %s', thing.ExpensiveOp())

then the ExpensiveOp will be evaluated even if nothing
is printed to the log. To avoid this, use the level_debug() function::

  if logging.level_debug():
    logging.debug('Thing: %s', thing.ExpensiveOp())

Per file level logging is supported by logging.vlog() and
logging.vlog_is_on(). For example::

    if logging.vlog_is_on(2):
      logging.vlog(2, very_expensive_debug_message())

Notes on Unicode
----------------

The log output is encoded as UTF-8.  Don't pass data in other encodings in
bytes() instances -- instead pass unicode string instances when you need to
(for both the format string and arguments).

Note on critical and fatal:
Standard logging module defines fatal as an alias to critical, but it's not
documented, and it does NOT actually terminate the program.
This module only defines fatal but not critical, and it DOES terminate the
program.

The differences in behavior are historical and unfortunate.
é    N)Úabc)Úflags)Ú	converter)ÚNoReturnzÇ^(?P<severity>[IWEF])(?P<month>\d\d)(?P<day>\d\d) (?P<hour>\d\d):(?P<minute>\d\d):(?P<second>\d\d)\.(?P<microsecond>\d\d\d\d\d\d) +(?P<thread_id>-?\d+) (?P<filename>[a-zA-Z<][\w._<>-]+):(?P<line>\d+)é   ÚLé   é   Ú_absl_log_fatalz
CRITICAL - Ú loggingz	__init__.Ú0Ú1Ú2Ú3)ÚdebugÚinfoÚ warningÚwarnÚerrorÚfatalr   r   r   r   )r
   r   r   r   c                   ó^   ‡ — e Zd ZdZˆ fd„Zed„ ¦   «         Zej         d„ ¦   «         Zd„ Zˆ xZ	S )Ú_VerbosityFlagzFlag class for -v/--verbosity.c                 óˆ   •—  t          ¦   «         j        t          j        ¦   «         t          j        ¦   «         g|¢R i |¤Ž d S ©N)ÚsuperÚ__init__r   Ú
IntegerParserÚArgumentSerializer©ÚselfÚargsÚkwargsÚ	__class__s      €ú@D:\streamlit_app\venv\Lib\site-packages\absl/logging/__init__.pyr   z_VerbosityFlag.__init__©   sY   ø€ Ø…EG„GÔÝ
ÔÑÔuÔ7Ñ9Ô9ðØ<@ðð ð ØDJðð ð ð ð ó    c                 ó   — | j         S r   ©Ú_value©r    s    r$   Úvaluez_VerbosityFlag.value®   ó
   € à
Œ;Ðr%   c                 ó<   — || _         |                      ¦   «          d S r   )r(   Ú_update_logging_levels©r    Úvs     r$   r*   z_VerbosityFlag.value²   s!   € à€D„KØ×ÒÑ!Ô!Ð!Ð!Ð!r%   c                 ó’  — t           sdS | j        t          j        k    rt          j        | j        ¦  «        }nt
          j        | j        dz
  z
  }t          t
          j        j	        v rEt            
                    t
          j
        ¦  «         t
          j         
                    |¦  «         dS t            
                    |¦  «         dS )zZUpdates absl logging levels to the current verbosity.

    Visibility: module-private
    Nr
   )Ú_absl_loggerr(   r   Ú
ABSL_DEBUGÚabsl_to_standardr   ÚDEBUGÚ
_absl_handlerÚrootÚhandlersÚsetLevelÚNOTSET)r    Ústandard_verbositys     r$   r-   z%_VerbosityFlag._update_logging_levels·   s®   € õ
 ð 
Ø€fà 
„{•iÔ*Ò *Ð *Ý$Ô5°d´kÑBÔBÐÐõ #œ=¨D¬K¸!©OÑ<Ðõ  œÔ-Ð -Ð -õ  ×ÒGœNÑ+Ô+Ð+Ý
„l×ÒÐ.Ñ/Ô/Ð/Ð/Ð/å×ÒÐ.Ñ/Ô/Ð/Ð/Ð/r%   )
Ú__name__Ú
__module__Ú__qualname__Ú __doc__r   Úpropertyr*   Úsetterr-   Ú
__classcell__©r#   s   @r$   r   r   ¦   s…   ø€ € € € € Ø&Ð&ðð ð ð ð ð
 ðð ñ „8ðð 	„<ð"ð "ñ „<ð"ð0ð 0ð 0ð 0ð 0ð 0ð 0r%   r   c                   ó^   ‡ — e Zd ZdZˆ fd„Zed„ ¦   «         Zej         d„ ¦   «         Zd„ Zˆ xZ	S )Ú_LoggerLevelsFlagzFlag class for --logger_levels.c                 ót   •—  t          ¦   «         j        t          ¦   «         t           ¦   «         g|¢R i |¤Ž d S r   )r   r   Ú_LoggerLevelsParserÚ_LoggerLevelsSerializerr   s      €r$   r   z_LoggerLevelsFlag.__init__Ò   sT   ø€ Ø…EG„GÔÝÑÔÕ6Ñ8Ô8ðØ;?ðð ð ØCIðð ð ð ð r%   c                 ó4   — | j                              ¦   «         S r   )r(   Úcopyr)   s    r$   r*   z_LoggerLevelsFlag.value×   s   € ð Œ;×
Ò
Ñ
Ô
Ðr%   c                 óD   — |€i n|| _         |                      ¦   «          d S r   )r(   Ú_update_logger_levelsr.   s     r$   r*   z_LoggerLevelsFlag.valueß   s)   € à˜	"" q€D„KØ×ÒÑ Ô Ð Ð Ð r%   c                 ó’   — | j                              ¦   «         D ],\  }}t          j        |¦  «                             |¦  «         Œ-d S r   )r(   Úitemsr   Ú	getLoggerr8   )r    ÚnameÚlevels      r$   rK   z'_LoggerLevelsFlag._update_logger_levelsä   sQ   € ð ”{×(Ò(Ñ*Ô*ð .ð .‰
ˆˆeÝ
Ô˜ÑÔ×&Ò& uÑ-Ô-Ð-Ð-ð.ð .r%   )
r;   r<   r=   r>   r   r?   r*   r@   rK   rA   rB   s   @r$   rD   rD   Ï   s…   ø€ € € € € Ø'Ð'ðð ð ð ð ð
 ðð ñ „8ðð 	„<ð!ð !ñ „<ð!ð.ð .ð .ð .ð .ð .ð .r%   rD   c                   ó   — e Zd ZdZd„ ZdS )rF   z Parser for --logger_levels flag.c                 ó8  — t          |t          j        ¦  «        r|S d„ |                     d¦  «        D ¦   «         }t	          j        ¦   «         }|D ]H}|                     dd¦  «        \  }}|                     ¦   «         }|                     ¦   «         }|||<   ŒI|S )Nc                 ó^   — g | ]*}|                      ¦   «         ¯|                      ¦   «         ‘Œ+S © )Ústrip)Ú.0Úpairs     r$   ú
<listcomp>z-_LoggerLevelsParser.parse.<locals>.<listcomp>ò   s-   € ÐGÐGÐG˜d¸$¿*º*¹,¼,ÐGˆTZŠZ‰\Œ\ÐGÐGÐGr%   ú,ú:r
   ) Ú
isinstancer   Ú MappingÚsplitÚ
collectionsÚ
OrderedDictrU   ) r    r*   ÚpairsÚlevelsÚ
name_levelrO   rP   s           r$   Úparsez_LoggerLevelsParser.parseî   sœ   € Ý %œÑ %Ô %ð Ø
€làGÐG e§k¢k°#Ñ&6Ô&6ÐGÑGÔG€Eõ Ô
$Ñ
&Ô
&€FØð ð ˆ
Ø×$Ò$ S¨!Ñ,Ô,k€dˆEØ
ZŠZ‰\Œ\€dØkŠk‰mŒm€eØ€fˆTl€lØ
€Mr%   N)r;   r<   r=   r>   rc   rT   r%   r$   rF   rF   ë   s)   € € € € € Ø(Ð(ð
ð 
ð 
ð 
ð 
r%   rF   c                   ó   — e Zd ZdZd„ ZdS )rG   z$Serializer for --logger_levels flag.c                 ó’   — t          |t          ¦  «        r|S d                     d„ |                     ¦   «         D ¦   «         ¦  «        S )NrY   c              3   ó*   K  — | ]\  }}|› d |› V — ŒdS )rZ   NrT   )rV   rO   rP   s      r$   ú	<genexpr>z4_LoggerLevelsSerializer.serialize.<locals>.<genexpr>  s4   è è € ÐGÐG©+¨$°tÐ%Ð%˜eÐ%Ð%ÐGÐGÐGÐGÐGÐGr%   )r[   ÚstrÚjoinrM   )r    r*   s     r$   Ú	serializez!_LoggerLevelsSerializer.serialize  sB   € Ý %Ñ Ô ð Ø
€lØ
8Š8ÐGÐG¸¿º¹¼ÐGÑGÔGÑ
GÔ
GÐGr%   N)r;   r<   r=   r>   rj   rT   r%   r$   rG   rG   þ   s.   € € € € € Ø,Ð,ðHð Hð Hð Hð Hr%   rG   c                   óX   ‡ — e Zd ZdZˆ fd„Zed„ ¦   «         Zej         d„ ¦   «         Zˆ xZS )Ú_StderrthresholdFlagz!Flag class for --stderrthreshold.c                 óˆ   •—  t          ¦   «         j        t          j        ¦   «         t          j        ¦   «         g|¢R i |¤Ž d S r   )r   r   r   ÚArgumentParserr   r   s      €r$   r   z_StderrthresholdFlag.__init__
  sY   ø€ Ø…EG„GÔÝ
ÔÑÔ¥Ô 8Ñ :Ô :ðØ=Aðð ð ØEKðð ð ð ð r%   c                 ó   — | j         S r   r'   r)   s    r$   r*   z_StderrthresholdFlag.value  r+   r%   c                 ó(  — |t           v rt          |¦  «        }t           |         }nd|                     ¦   «         t          v r7|                     ¦   «         }|dk    rd}t          t          |         ¦  «        }nt	          d|z  ¦  «        ‚|| _        d S )Nr   r   z--stderrthreshold must be one of (case-insensitive) 'debug', 'info', 'warning', 'error', 'fatal', or '0', '1', '2', '3', not '%s')Ú_CPP_LEVEL_TO_NAMESÚintÚlowerÚ_CPP_NAME_TO_LEVELSÚ
ValueErrorr(   )r    r/   Ú	cpp_values      r$   r*   z_StderrthresholdFlag.value  s—   € à ÕÐ Ð õ a‘&”&€iÝ
˜aÔ
 €a€aØ	
Š‰ŒÕ)Ð	)Ð	)Ø

'Š'‰)Œ)€aØ	
ˆfŠˆØˆÝÕ)¨!Ô,Ñ-Ô-€i€iåð
,à./ñ
0ñ
1ô 
1ð  1ð
 €D„K€K€Kr%   )	r;   r<   r=   r>   r   r?   r*   r@   rA   rB   s   @r$   rl   rl      sv   ø€ € € € € Ø)Ð)ðð ð ð ð ð
 ðð ñ „8ðð 	„<ðð ñ „<ðð ð ð ð r%   rl   Ú
logtostderrFzShould only log to stderr?T)Úallow_override_cppÚalsologtostderrzalso log to stderr?Ú log_dirÚ
TEST_TMPDIRÚ z directory to write logfiles intoÚ	verbosityéÿÿÿÿzñLogging verbosity level. Messages logged at this level or lower will be included. Set to 1 for debug logging. If the flag was not set or supplied, the value will be changed from the default of -1 (warning) to 0 (info) after flags are parsed.r/   )Ú
short_nameÚallow_hide_cppÚ
logger_levelszâSpecify log level of loggers. The format is a CSV list of `name:level`. Where `name` is the logger name used with `logging.getLogger()`, and `level` is a level name  (INFO, DEBUG, etc). e.g. `myapp.foo:INFO,other.logger:DEBUG`ÚstderrthresholdaM  log messages at this level, or more severe, to stderr in addition to the logfile.  Possible values are 'debug', 'info', 'warning', 'error', and 'fatal'.  Obsoletes --alsologtostderr. Using --alsologtostderr cancels the effect of this flag. Please also note that this flag is subject to --verbosity and requires logfile not be stderr.)r€   ÚshowprefixforinfozŠIf False, do not prepend prefix to info messages when it's logged to stderr, --verbosity is set to INFO level, and python logging is used.c                  ó&   — t           d         j        S )zReturns the logging verbosity.r}   )ÚFLAGSr*   rT   r%   r$   Ú
get_verbosityr†   p  s   € å	ˆ{Ô	Ô	!Ð!r%   c                 ó¨   — 	 t          | ¦  «        }n4# t          $ r' t          j        |                      ¦   «                  }Y nw xY w|t
          _        dS )ao  Sets the logging verbosity.

  Causes all messages of level <= v to be logged,
  and all messages of level > v to be silently discarded.

  Args:
    v: int|str, the verbosity level as an integer or string. Legal string values
        are those that can be coerced to an integer as well as case-insensitive
        'debug', 'info', 'warning', 'error', and 'fatal'.
  N) rr   ru   r   Ú
ABSL_NAMESÚupperr…   r}   )r/   Ú	new_levels     r$   Ú
set_verbosityr‹   u  sS   € ð0ÝA‘”€I€IøÝ	ð 0ð 0ð 0ÝÔ$ Q§W¢W¡Y¤YÔ/€I€I€Ið0øøøà…%„/€/€/s   ‚ ’.AÁAc                 ó@  — | t           j        v rt           j        |          t          _        dS t	          | t
          ¦  «        r.|                      ¦   «         t           j         v r| t          _        dS t          d 	                    | t          | ¦  «        ¦  «        ¦  «        ‚)a:  Sets the stderr threshold to the value passed in.

  Args:
    s: str|int, valid strings values are case-insensitive 'debug',
        'info', 'warning', 'error', and 'fatal'; valid integer values are
        logging.DEBUG|INFO|WARNING|ERROR|FATAL.

  Raises:
      ValueError: Raised when s is an invalid value.
  z²set_stderrthreshold only accepts integer absl logging level from -3 to 1, or case-insensitive string values 'debug', 'info', 'warning', 'error', and 'fatal'. But found "{}" ({}).N)
r   Ú
ABSL_LEVELSr…   r‚   r[   rh   r‰   rˆ   ru   ÚformatÚtype)Úss    r$   Úset_stderrthresholdr‘   ‡  s‹   € ð  )Ô
ÐÐÝ%Ô1°!Ô4…EÔÐÐÝ !•SÑ Ô ð  3˜aŸgšg™iœi­9Ô+?Ð?Ð?Ø…EÔÐÐå
ð	÷  &šv a­¨a©¬Ñ1Ô1ñ	
3ô 
3ð 3r%   c                 ó2   — t          t          | g|¢R i |¤Ž dS )zLogs a fatal message.N)ÚlogÚFATAL©Úmsgr!   r"   s      r$   r   r   ž  s*   € õ …eˆSÐ"4Ð"Ð"Ð"˜6Ð"Ð"Ð"Ð"Ð"r%   c                 ó2   — t          t          | g|¢R i |¤Ž dS )zLogs an error message.N)r“   ÚERRORr•   s      r$   r   r   ¤  ó(   € å…eˆSÐ"4Ð"Ð"Ð"˜6Ð"Ð"Ð"Ð"Ð"r%   c                 ó2   — t          t          | g|¢R i |¤Ž dS )zLogs a warning message.N)r“   Ú WARNINGr•   s      r$   r   r   ©  s(   € å…gˆsÐ$TÐ$Ð$Ð$˜VÐ$Ð$Ð$Ð$Ð$r%   c                 óh   — t          j        dt          d¦  «         t           t          | g|¢R i |¤Ž dS )z"Deprecated, use 'warning' instead.z8The 'warn' function is deprecated, use 'warning' insteadr    N)Úwarningsr   ÚDeprecationWarningr“   r›   r•   s      r$   r   r   ®  sD   € å
„-ÐJÝ" Añ'ô 'ð 'å…gˆsÐ$TÐ$Ð$Ð$˜VÐ$Ð$Ð$Ð$Ð$r%   c                 ó2   — t          t          | g|¢R i |¤Ž dS )zLogs an info message.N)r“   ÚINFOr•   s      r$   r   r   µ  s(   € å…dˆCÐ!$Ð!Ð!Ð!˜&Ð!Ð!Ð!Ð!Ð!r%   c                 ó2   — t          t          | g|¢R i |¤Ž dS )zLogs a debug message.N)r“   r4   r•   s      r$   r   r   º  r™   r%   )Úexc_infoc                ó*   — t          | g|¢R d|i|¤Ž dS )z.Logs an exception, with traceback and message.r¢   N)r   )r–   r¢   r!   r"   s       r$   Ú	exceptionr¤   ¿  s+   € å ˆÐ0ˆdÐ0Ð0Ð0˜XÐ0¨Ð0Ð0Ð0Ð0Ð0r%   c                  ó  — t          j        ¦   «         } |  | j        €t           ¦   «         S | j        } g }| j        r:| j        } |                     | j        j        | j         | j        f¦  «         | j        °:t           |¦  «        S )a  A fast stack trace that gets us the minimal information we need.

  Compared to using `get_absl_logger().findCaller(stack_info=True)`, this
  function is ~100x faster.

  Returns:
    A tuple of tuples of (filename, line_number, last_instruction_offset).
  )	Ú inspectÚcurrentframeÚf_backÚtupleÚappendÚf_codeÚ
co_filenameÚf_linenoÚ f_lasti)Ú	cur_stackÚ
call_stacks     r$   Ú_fast_stack_tracer±   Ä  s”   € õ Ô"Ñ$Ô$€)ØÐ˜)Ô*Ð2Ý
‰7Œ7€NàÔ€)Ø€*ØÔð ØÔ €IØ×ÒØ	Ô	Ô	% yÔ'9¸9Ô;LÐMñô ð ð 	Ôð õ
 
ˆzÑ	Ô	Ðr%   c                  ót   — t          t                               | t           j        ¦   «         ¦  «        ¦  «        S )zäWrapper for _log_counter_per_token. Thread-safe.

  Args:
    token: The token for which to look up the count.

  Returns:
    The number of times this function has been called with
    *token* as an argument (starting at 0).
  )ÚnextÚ_log_counter_per_tokenÚ
setdefaultÚ	itertoolsÚcount)Útokens    r$   Ú_get_next_log_count_per_tokenr¹   ß  s+   € õ 
Õ$×/Ò/°µy´Ñ7HÔ7HÑIÔIÑ	JÔ	JÐJr%   )Úuse_call_stackc                 óÞ   — t          ¦   «                              ¦   «         }|r(g |dd…         ¢t          t           ¦   «         ¦  «        ‘R }t	          |¦  «        }t
          | |||z   g|¢R Ž  dS )aé  Logs ``msg % args`` at level 'level' once per 'n' times.

  Logs the 1st call, (N+1)st call, (2N+1)st call,  etc.
  Not threadsafe.

  Args:
    level: int, the absl logging level at which to log.
    msg: str, the message to be logged.
    n: int, the number of times this should be called before it is logged.
    *args: The args to be substituted into the msg.
    use_call_stack: bool, whether to include the call stack when counting the
      number of times the message is logged.
  r   é   N©Úget_absl_loggerÚ
findCallerÚhashr±   r¹   Úlog_if© rP   r–   Únrº   r!   Ú
caller_infor·   s           r$   Ú
log_every_nrÅ   î  s   € õ  Ñ!Ô!×,Ò,Ñ.Ô.€+Øð Aà@K  ! Ô$Ð@¥dÕ+<Ñ+>Ô+>Ñ&?Ô&?Ð@Ð@€KÝ
'¨
Ñ
4Ô
4€%Ýˆ˜% !™)_Ð, tÐ,Ð,Ð,Ð,Ð,Ð,r%   c                 ó   — t          j        ¦   «         }t                               | d¦  «        }|	||z
  |k    r|t          | <   dS dS )aö  Tests if 'num_seconds' have passed since 'token' was requested.

  Not strictly thread-safe - may log with the wrong frequency if called
  concurrently from multiple threads. Accuracy depends on resolution of
  'timeit.default_timer()'.

  Always returns True on the first call for a given 'token'.

  Args:
    token: The token for which to look up the count.
    num_seconds: The number of seconds to test for.

  Returns:
    Whether it has been >= 'num_seconds' since 'token' was last requested.
  NTF)ÚtimeitÚ
default_timerÚ_log_timer_per_tokenÚget)r¸   Ú
num_secondsÚnowÚthens       r$   Ú_seconds_have_elapsedrÎ   
  sO   € õ  	ÔÑÔ€#Ý	×	!Ò	! %¨Ñ	.Ô	.€$Ø	€\c˜D‘j [Ò0Ð0Ø"%Õ˜ÑØ
ˆ4à
ˆ5r%   c                 óØ   — t          ¦   «                              ¦   «         }|r(g |dd…         ¢t          t           ¦   «         ¦  «        ‘R }t	          ||¦  «        }t
          | ||g|¢R Ž  dS )a[  Logs ``msg % args`` at level ``level`` iff ``n_seconds`` elapsed since last call.

  Logs the first call, logs subsequent calls if 'n' seconds have elapsed since
  the last logging call from the same call site (file + line). Not thread-safe.

  Args:
    level: int, the absl logging level at which to log.
    msg: str, the message to be logged.
    n_seconds: float or int, seconds which should elapse before logging again.
    *args: The args to be substituted into the msg.
    use_call_stack: bool, whether to include the call stack when counting the
      number of times the message is logged.
  r   r¼   N)r¾   r¿   rÀ   r±   rÎ   rÁ   ) rP   r–   Ú	n_secondsrº   r!   rÄ   Ú
should_logs           r$   Úlog_every_n_secondsrÒ   #  s}   € õ  Ñ!Ô!×,Ò,Ñ.Ô.€+Øð Aà@K  ! Ô$Ð@¥dÕ+<Ñ+>Ô+>Ñ&?Ô&?Ð@Ð@€KÝ$ [°)Ñ<Ô<€*ÝˆZÐ' $Ð'Ð'Ð'Ð'Ð'Ð'r%   c                 óÞ   — t          ¦   «                              ¦   «         }|r(g |dd…         ¢t          t           ¦   «         ¦  «        ‘R }t	          |¦  «        }t
          | |||k     g|¢R Ž  dS )a«  Logs ``msg % args`` at level ``level`` only first ``n`` times.

  Not threadsafe.

  Args:
    level: int, the absl logging level at which to log.
    msg: str, the message to be logged.
    n: int, the maximal number of times the message is logged.
    *args: The args to be substituted into the msg.
    use_call_stack: bool, whether to include the call stack when counting the
      number of times the message is logged.
  r   r¼   Nr½   rÂ   s           r$   Ú
log_first_nrÔ   9  s   € õ  Ñ!Ô!×,Ò,Ñ.Ô.€+Øð Aà@K  ! Ô$Ð@¥dÕ+<Ñ+>Ô+>Ñ&?Ô&?Ð@Ð@€KÝ
'¨
Ñ
4Ô
4€%ÝˆU˜Q’YÐ& Ð&Ð&Ð&Ð&Ð&Ð&r%   c                  ó*   — |rt          | |g|¢R Ž  dS dS )zFLogs ``msg % args`` at level ``level`` only if condition is fulfilled.N©r“   )rP   r–   Ú	conditionr!   s       r$   rÁ   rÁ   N  s2   € àð Ý ˆˆsÐTÐÐÐÐÐÐðð r%   c                 ó   — | t           j        k    rt           j        | dz
  z
  }n0| t           j        k     rt           j        } t          j        | ¦  «        }t
          j        j         st
          j        ¦   «          t          j
        ||g|¢R i |¤Ž dS )aD  Logs ``msg % args`` at absl logging level ``level``.

  If no args are given just print msg, ignoring any interpolation specifiers.

  Args:
    level: int, the absl logging level at which to log the message
        (logging.DEBUG|INFO|WARNING|ERROR|FATAL). While some C++ verbose logging
        level constants are also supported, callers should prefer explicit
        logging.vlog() calls for such purpose.

    msg: str, the message to be logged.
    *args: The args to be substituted into the msg.
    **kwargs: May contain exc_info to add exception traceback to message.
  r
   N)
r   r2   ÚSTANDARD_DEBUGÚ
ABSL_FATALr3   r   r6   r7   Ú
basicConfigr1   r“   )rP   r–   r!   r"   Ústandard_levels        r$   r“   r“   T  s”   € ð 
YÔ
!Ò!Ð!õ Ô-°¸±Ñ;€N€Nà yÔ#Ò #Ð #ÝÔ"€eÝÔ/°Ñ6Ô6€Nõ
 
ŒÔ	ð Ý
ÔÑÔÐåÔ> 3Ð8¨Ð8Ð8Ð8°Ð8Ð8Ð8Ð8Ð8r%   c                 ó(   — t          | |g|¢R i |¤Ž dS )aÇ  Log ``msg % args`` at C++ vlog level ``level``.

  Args:
    level: int, the C++ verbose logging level at which to log the message,
        e.g. 1, 2, 3, 4... While absl level constants are also supported,
        callers should prefer logging.log|debug|info|... calls for such purpose.
    msg: str, the message to be logged.
    *args: The args to be substituted into the msg.
    **kwargs: May contain exc_info to add exception traceback to message.
  NrÖ   )rP   r–   r!   r"   s       r$   ÚvlogrÞ   v  s*   € õ €eˆSÐ"4Ð"Ð"Ð"˜6Ð"Ð"Ð"Ð"Ð"r%   c                 óÜ   — | t           j        k    rt           j        | dz
  z
  }n0| t           j        k     rt           j        } t          j        | ¦  «        }t
                               |¦  «        S )a  Checks if vlog is enabled for the given level in caller's source file.

  Args:
    level: int, the C++ verbose logging level at which to log the message,
        e.g. 1, 2, 3, 4... While absl level constants are also supported,
        callers should prefer level_debug|level_info|... calls for
        checking those.

  Returns:
    True if logging is turned on for that level.
  r
   ) r   r2   rÙ   rÚ   r3   r1   ÚisEnabledFor)rP   rÜ   s     r$   Ú
vlog_is_onrá   „  sa   € ð 
YÔ
!Ò!Ð!õ Ô-°¸±Ñ;€N€Nà yÔ#Ò #Ð #ÝÔ"€eÝÔ/°Ñ6Ô6€NÝ	×	"Ò	" >Ñ	2Ô	2Ð2r%   c                  óF   — t          ¦   «                              ¦   «          dS )úFlushes all log files.N)Úget_absl_handlerÚflushrT   r%   r$   rå   rå     s    € åÑÔ×ÒÑÔÐÐÐr%   c                  ó0   — t          ¦   «         t          k    S )z+Returns True if debug logging is turned on.)r†   r4   rT   r%   r$   Ú
level_debugrç   ¢  ó   € å	‰ŒEÒ	!Ð!r%   c                  ó0   — t          ¦   «         t          k    S )z*Returns True if info logging is turned on.)r†   r    rT   r%   r$   Ú
level_inforê   §  s   € å	‰ŒDÒ	 Ð r%   c                  ó0   — t          ¦   «         t          k    S )z-Returns True if warning logging is turned on.)r†   r›   rT   r%   r$   Ú
level_warningrì   ¬  s   € å	‰ŒGÒ	#Ð#r%   c                  ó0   — t          ¦   «         t          k    S )z+Returns True if error logging is turned on.)r†   r˜   rT   r%   r$   Ú
level_errorrî   ´  rè   r%   c                 óä   — | t           j        vrt          d| › ¦  «        ‚t           ¦   «         j        j        }|t          j         k    s |t          j        k    st          |d¦  «        sdS |j
        S )aD  Returns the name of the log file.

  For Python logging, only one file is used and level is ignored. And it returns
  empty string if it logs to stderr/stdout or the log stream has no `name`
  attribute.

  Args:
    level: int, the absl.logging level.

  Raises:
    ValueError: Raised when `level` has an invalid value.
  zInvalid absl.logging level rO   r|   )
r   r   ru   rä   Úpython_handlerÚstreamÚsysÚstderrÚstdoutÚ hasattrrO   )rP   rñ   s     r$   Úget_log_file_namerö   ¹  sr   € ð 
•)Ô'Ð'Ð'Ý
Ð:°5Ð:Ð:Ñ
;Ô
;Ð;Ý
Ñ
Ô
Ô
,Ô
3€&Ø•”
ÒÐ˜f­¬
Ò2Ð2Ý
&˜&Ñ
!Ô
!ð 3à

ˆ2à
Œ;Ðr%   c                 óÔ  — | sWt           j                             t           j                             t          j        d         ¦  «        ¦  «        d         } d| z  } t
          |¬¦  «        }	 t          j        ¦   «         }nH# t          $ r; t          t           d¦  «        r!t          t          j        ¦   «         ¦  «        }nd}Y nw xY wt          j        ¦   «         }| ›d|›d|›d }||| fS )ab  Computes the directory and filename prefix for log file.

  Args:
    program_name: str|None, the filename part of the path to the program that is
      running without its extension.  e.g: if your program is called
      ``usr/bin/foobar.py`` this method should probably be called with
      ``program_name='foobar`` However, this is just a convention, you can pass
      in any string you want, and it will be used as part of the log filename.
      If you don't pass in anything, the default behavior is as described in the
      example.  In python standard logging mode, the program_name will be
      prepended with ``py_`` if it is the ``program_name`` argument is omitted.
    log_dir: str|None, the desired log directory.

  Returns:
    (log_dir, file_prefix, symlink_prefix)

  Raises:
    FileNotFoundError: raised when it cannot find a log directory.
  r   zpy_%s)rz   ÚgetuidÚ unknownú.z.log)ÚosÚpathÚsplitextÚbasenamerò   ÚargvÚfind_log_dirÚ getpassÚ getuserÚKeyErrorrõ   rh   rø   ÚsocketÚ
gethostname)Úprogram_namerz   Úactual_log_dirÚusernameÚhostnameÚ
file_prefixs         r$   Úfind_log_dir_and_namesr
  Ð  sì   € ð( 
ð *õ ”7×#Ò#¥B¤G×$4Ò$4µS´X¸a´[Ñ$AÔ$AÑBÔBÀ1ÔE€Lð ˜\Ñ)€Lå¨ Ð0Ñ0Ô0€.ðÝŒÑ Ô €H€HøÝ	ð ð ð å r8Ñ Ô ð å•R”Y‘[”[Ñ!Ô!€h€hà€høøð
øøøõ Ô
Ñ
!Ô
!€(Ø". , ,°°°¸(¸(¸(ÐC€+à	˜ lÐ	2Ð2s   Á+A? Á?ACÃCc                 ó4  — | r| g}n:t           d         j        rt           d         j        g}nt          j        ¦   «         g}|D ]D}t          j                             |¦  «        r#t	          j         |t          j        ¦  «        r|c S ŒEt          d|z  ¦  «        ‚)a¦  Returns the most suitable directory to put log files into.

  Args:
    log_dir: str|None, if specified, the logfile(s) will be created in that
      directory.  Otherwise if the --log_dir command-line flag is provided, the
      logfile will be created in that directory.  Otherwise the logfile will be
      created in a standard location.

  Raises:
    FileNotFoundError: raised when it cannot find a log directory.
  rz   z2Can't find a writable directory for logs, tried %s)
r…   r*   ÚtempfileÚ
gettempdirrû   rü   ÚisdirÚaccessÚW_OKÚFileNotFoundError)rz   ÚdirsÚds      r$   r   r   ÿ  s­   € ð  
ð #àˆ9€D€DÝ ˆYÔ Ô ð #õ 
)ÔÔ"Ð
#€D€DåÔÑ!Ô!Ð
"€Dð ð ð €aÝ 	„w‡}‚}QÑ Ô ð BœI a­¬Ñ1Ô1ð Ø
€h€h€høÝØ:¸TÑAñ	Cô 	Cð Cr%   c                 ód  — t          j        | j        ¦  «        }t           | j        dz  dz  ¦  «        }d}| j        }t
          | ¦  «        rt          j         }t          }t          j
        |¦  «        }d||j
        |j        |j
        |j        |j        |t!          ¦   «         | j        | j        |f
z  S )zxReturns the absl log prefix for the log record.

  Args:
    record: logging.LogRecord, the record to get prefix for.
  g      ð?g    €„.Ar|   z,%c%02d%02d %02d:%02d:%02d.%06d %5d %s:%d] %s)ÚtimeÚ	localtimeÚ createdrr   Ú levelnoÚ_is_non_absl_fatal_recordr   r˜   Ú_CRITICAL_PREFIXr   Úget_initial_for_levelÚtm_monÚ tm_mdayÚ tm_hourÚtm_minÚtm_secÚ_get_thread_idÚfilenameÚlineno)ÚrecordÚ
created_tupleÚcreated_microsecondÚcritical_prefixrP   Úseveritys         r$   Úget_absl_log_prefixr*  !  sµ   € õ ”. ¤Ñ0Ô0€-Ý˜FœN¨SÑ0°3Ñ6Ñ7Ô7Ðà€/Ø
Œ.€%Ý˜vÑ&Ô&ð 'õ 
ŒM€EÝ&€OÝ
Ô
,¨UÑ
3Ô
3€(à	7ØØÔØÔØÔØÔØÔØÝÑÔØ„oØ„mØð
;ñ 

ð 
r%   c                 ój  — t          | ¦  «        r8t          | dd¦  «        }|€t          d¦  «        ‚|j        }|j        }|j        }nOt
          | t          ¦  «        r+t          ¦   «          	                    ¦   «         d         }| }d}nt          d¦  «        ‚t                               |||¦  «         | S )aä  Skips reporting the prefix of a given function or name by :class:`~absl.logging.ABSLLogger`.

  This is a convenience wrapper function / decorator for
  :meth:`~absl.logging.ABSLLogger.register_frame_to_skip`.

  If a callable function is provided, only that function will be skipped.
  If a function name is provided, all functions with the same name in the
  file that this is called in will be skipped.

  This can be used as a decorator of the intended function to be skipped.

  Args:
    func: Callable function or its name as a string.

  Returns:
    func (the input, unchanged).

  Raises:
    ValueError: The input is callable but does not have a function code object.
    TypeError: The input is neither callable nor a string.
  Ú__code__Nz4Input callable does not have a function code object.r   z'Input is neither callable nor a string.)
ÚcallableÚ getattrru   r¬   Ú co_nameÚco_firstlinenor[   rh   r¾   r¿   Ú	TypeErrorÚ
ABSLLoggerÚregister_frame_to_skip)ÚfuncÚ	func_codeÚ	file_nameÚ	func_nameÚ
func_linenos        r$   Úskip_log_prefixr9  A  s¸   € õ, ˆd^„^ð ?Ý˜˜j¨$Ñ/Ô/€IØ Ð ÝÐMÑNÔNÐNØÔ%€IØÔ!€IØÔ*€K€KÝ $Ñ Ô ð ?ÝÑ!Ô!×,Ò,Ñ.Ô.¨qÔ1€IØ€IØ€K€Kå
Ð=Ñ
>Ô
>Ð>Ý×#Ò# I¨y¸+ÑFÔFÐFØ	
€+r%   c                 ón   — | j         t          j        k    o | j                             t
          d¦  «         S ©NF©r  r   r”   Ú__dict__rÊ   Ú_ABSL_LOG_FATAL©Ú
log_records    r$   r  r  h  s2   € Ø
Ô
¥ ¤
Ò
-ð 
>ØÔ!×%Ò%¥o°uÑ=Ô=Ð
=ð?r%   c                 ól   — | j         t          j        k    o| j                             t
          d¦  «        S r;  r<  r?  s    r$   Ú_is_absl_fatal_recordrB  m  s/   € Ø
Ô
¥ ¤
Ò
-ð 
:Ø
Ô
×
!Ò
!¥/°5Ñ
9Ô
9ð;r%   c                   óX   ‡ — e Zd ZdZd
ˆ fd„	Zd
d„Zd
d„Zd„ Z ˆ fd „Zˆ fd„Z	ˆ fd	„Z
ˆ xZ
S )
Ú
PythonHandlerz?The handler class used by Abseil Python logging implementation.Nc                 ó   •— t          ¦   «                              |¦  «         |                      |p
t           ¦   «         ¦  «         d S r   )r   r   ÚsetFormatterÚPythonFormatter)r    rñ   Ú	formatterr#   s      €r$   r   zPythonHandler.__init__y  s@   ø€ Ý	G„G×ÒVÑÔÐØ×ÒiÐ4¥?Ñ#4Ô#4Ñ5Ô5Ð5Ð5Ð5r%   c           	      ó¸  — dt           _        t          ||¬¦  «        \  }}}d|t           j        dt           j        t           j        ¦   «         ¦  «        ¦  «        t
          j         ¦   «         fz  }t          j         	                    ||¦  «        } t          | dd¬ ¦  «        | _
        t          t          dd	¦  «        rœt          j         	                    ||d
z   ¦  «        }	 t          j         
                    |¦  «        rt
          j        |¦  «         t
          j        t          j                             | ¦  «        |¦  «         d	S # t"          $ r Y d	S w xY wd	S )
z;Starts logging messages to files instead of standard error.F©r  rz   z
%s.INFO.%s.%dz
%Y%m%d-%H%M%SÚazutf-8)ÚencodingÚ symlinkNz.INFO)r…   rw   r
  r  Ústrftimer  rû   Úgetpidrü   ri   Úopenrñ   r.  ÚislinkÚunlinkrM  rþ   Ú OSError)	r    r  rz   r   r
  Úsymlink_prefixrþ   r#  rM  s	            r$   Ústart_logging_to_filez#PythonHandler.start_logging_to_file}  sD  € à…EÔå2HØ!¨7ð34ñ 34ô 34Ñ/€NK ð ØÝŒ
o¥t¤~µd´i±k´kÑ'BÔ'BÑCÔCÝ
Œ	‰
Œ
ð "ñ €Hõ Œw|Š|˜N¨HÑ5Ô5€Håx ¨wÐ7Ñ7Ô7€D„Kõ r9˜dÑ #Ô #ð 

å” —’˜^¨^¸gÑ-EÑFÔF€gð 
Ý

Œ7>Š>˜'Ñ
"Ô
"ð 	Ý
Œ)GÑ
Ô
Ð
Ý
Œ
•2”7×#Ò# HÑ-Ô-¨wÑ7Ô7Ð7Ð7Ð7øÝ
ð  
ð  
ð  
ð 	
ˆˆð	 
øøøð

ð 

s   Ã"A%E	 Å	
EÅEc                 ó~   — t           d         j        rt          j        | _        dS |                      ||¬¦  «         dS )z4Conditionally logs to files, based on --logtostderr.rw   rJ  N)r…   r*   rò   ró   rñ   rU  ©r    r  rz   s      r$   Úuse_absl_log_filezPythonHandler.use_absl_log_fileš  s?   € å ˆ]Ô Ô !ð MÝ”J€d„k€k€kà
× Ò ¨lÀGÐ ÑLÔLÐLÐLÐLr%   c                 ó$  — |                       ¦   «          	 | j        r.t          | j        d¦  «        r| j                             ¦   «          n# t          t
          f$ r Y nw xY w|                      ¦   «          dS # |                      ¦   «          w xY w)rã   rå   N) Ú acquirerñ   rõ   rå   rS  ru   Ú releaser)   s    r$   rå   zPythonHandler.flush¡  s   € à‡L‚LN„N€Nð Ø	
Œð   ¤¨gÑ6Ô6ð  ØŒ
×ÒÑÔÐøøÝ•ZÐ
 ð 
ð 
ð 
à
€dð
øøøð  
‡l‚ln„n€n€n€nø€d‡l‚ln„n€n€nøøøs)   –5A Á
A9 ÁA ÁA9 ÁA Á A9 Á9Bc                 ó¢   •— | j         }t          j        | _         	 t           ¦   «                              |¦  «         || _         dS # || _         w xY w)zÔEmits the record to stderr.

    This temporarily sets the handler stream to stderr, calls
    StreamHandler.emit, then reverts the stream back.

    Args:
      record: logging.LogRecord, the record to log.
    N)rñ   rò   ró   r   Úemit)r    r%  Ú
old_streamr#   s      €r$   Ú_log_to_stderrzPythonHandler._log_to_stderr­  sN   ø€ ð ”€JÝ”*€D„KðÝ
g„g‡l‚l6ÑÔÐà€d„k€k€køJ€d„kÐÐÐÐs
   ›!A Á	Ac                 ó’  •— |j         }t                               ¦   «         s>t          r!t          j                             d¦  «         da|                       |¦  «         n¯t          d         j        r|                       |¦  «         n‡t          ¦   «          
                    |¦  «         t          j        t          d         j        ¦  «        }t          d         j        s||k    r*| j
        t          j        k    r|                       |¦  «         t          |¦  «        r)|                      ¦   «          t!          j        ¦   «          dS dS ) a€  Prints a record out to some streams.

    1. If ``FLAGS.logtostderr`` is set, it will print to ``sys.stderr`` ONLY.
    2. If ``FLAGS.alsologtostderr`` is set, it will print to ``sys.stderr``.
    3. If ``FLAGS.logtostderr`` is not set, it will log to the stream
        associated with the current thread.

    Args:
      record: :class:`logging.LogRecord`, the record to emit.
    z5WARNING: Logging before flag parsing goes to stderr.
Frw   r‚   ry   N)r  r…   Ú	is_parsedÚ_warn_preinit_stderrrò   ró   Úwriter_  r*   r   r]  r   Ústring_to_standardrñ   rB  rå   rû   Úabort)r    r%  rP   Ústderr_thresholdr#   s       €r$   r]  zPythonHandler.emit¿  s6  ø€ ð" 
ŒN€EÝ
?Š?Ñ
Ô
ð $å	ð  %Ý
Œ
×ÒØDñ	Fô 	Fð 	Fà$ÐØ
×Ò˜&Ñ!Ô!Ð!Ð!Ý	ˆ}Ô	Ô	#ð $Ø
×Ò˜&Ñ!Ô!Ð!Ð!å
g„g‡l‚l6ÑÔÐÝ"Ô5Ý
Ð!Ô
"Ô
(ñ*ô *Ðå
Ð"Ô
#Ô
)ð  $¨UÐ6FÒ-FÐ-FØ
Œ+œÒ
#Ð
#Ø×Ò˜FÑ#Ô#Ð#å ˜VÑ $Ô $ð Ø
‡j‚jl„l€lõ  	„hj„j€j€j€jð
ð r%   c                 ó  •— |                       ¦   «          	 |                      ¦   «          	 t          j        t          j        t          j        t          j        f}| j         |vrGt          | j         d¦  «        r| j          	                    ¦   «         s| j          
                    ¦   «          n# t          $ r Y nw xY wt          ¦   «          
                    ¦   «          |  
                    ¦   «          dS # |  
                    ¦   «          w xY w)z*Closes the stream to which we are writing.ÚisattyN)rZ  rå   rò   ró   rô   Ú
__stderr__Ú
__stdout__rñ   rõ   rh  Úcloseru   r   r[  )r    Úuser_managedr#   s     €r$   rk  zPythonHandler.closeé  sá   ø€ à‡L‚LN„N€NðØ
‡j‚jl„l€lð
 
õ ”z¥3¤:­s¬~½s¼~ÐMˆØ
Œ;˜lÐ
*Ð
*Ý˜œ
 XÑ.Ô.ð +Ø6:´k×6HÒ6HÑ6JÔ6Jð +à
Œ+×
Ò
Ñ
Ô
Ð
øøÝ
ð  
ð  
ð  
àˆð 
øøøõ  g„g‡m‚mo„o€oà
‡l‚ln„n€n€n€nø€d‡l‚ln„n€n€nøøøs/   —C1 ¬A>B+ Â*C1 Â+
B8Â5C1 Â7B8Â8#C1 Ã1D ©NN)r;   r<   r=   r>   r   rU  rX  rå   r_  r]  rk  rA   rB   s   @r$   rD  rD  v  sÊ   ø€ € € € € ØGÐGð6ð 6ð 6ð 6ð 6ð 6ð
ð 
ð 
ð 
ð:Mð Mð Mð Mð
ð 
ð 
ðð ð ð ð ð$(ð (ð (ð (ð (ðTð ð ð ð ð ð ð ð r%   rD  c                   óv   ‡ — e Zd ZdZˆ fd„Zd„ Zd„ Zd„ Z d„ Zˆ fd „Z	d„ Z
e
d	„ ¦   «         Zd
„ Z
dd„Zdd
„Zˆ xZS )Ú
ABSLHandlerz+Abseil Python logging module's log handler.c                 óš   •— t          ¦   «                              ¦   «          t          |¬¦  «        | _        |                      ¦   «          d S )N)rH  )r   r   rD  Ú_python_handlerÚactivate_python_handler)r    Úpython_logging_formatterr#   s     €r$   r   zABSLHandler.__init__  sE   ø€ Ý	G„G×ÒÑÔÐå(Ð3KÐLÑLÔL€DÔØ× Ò Ñ"Ô"Ð"Ð"Ð"r%   c                 ó6   — | j                              |¦  «        S r   )Ú_current_handlerrŽ   ©r    r%  s     r$   rŽ   zABSLHandler.format   s   € Ø
Ô
 ×
'Ò
'¨Ñ
/Ô
/Ð/r%   c                 ó:   — | j                              |¦  «         d S r   )ru  rF  )r    Úfmts     r$   rF  zABSLHandler.setFormatter
  s   € ØÔ×&Ò& sÑ+Ô+Ð+Ð+Ð+r%   c                 ó:   — | j                              |¦  «         d S r   )ru  r]  rv  s     r$   r]  zABSLHandler.emit
  s   € ØÔ×Ò˜vÑ&Ô&Ð&Ð&Ð&r%   c                 ó8   — | j                              ¦   «          d S r   )ru  rå   r)   s    r$   rå   zABSLHandler.flush  s   € ØÔ×ÒÑ!Ô!Ð!Ð!Ð!r%   c                 óz   •— t          ¦   «                              ¦   «          | j                             ¦   «          d S r   )r   rk  ru  )r    r#   s    €r$   rk  zABSLHandler.close  s/   ø€ Ý	G„G‡M‚MO„O€OØÔ×ÒÑ!Ô!Ð!Ð!Ð!r%   c                 óh   — |                       |¦  «        }|r| j                             |¦  «        S |S r   )Úfilterru  Úhandle)r    r%  Úrvs      r$   r~  zABSLHandler.handle  s7   € Ø	
ŠVÑ	Ô	€BØ 	ð 2Ø
Ô
"×
)Ò
)¨&Ñ
1Ô
1Ð1Ø

€Ir%   c                 ó   — | j         S r   )rq  r)   s    r$   rð   zABSLHandler.python_handler  s
   € à
Ô
Ðr%   c                 ó   — | j         | _        dS )z?Uses the Python logging handler as the current logging handler.N)rq  ru  r)   s    r$   rr  z#ABSLHandler.activate_python_handler!  s   € à Ô0€DÔÐÐr%   Nc                 ó<   — | j                              ||¦  «         d S r   )ru  rX  rW  s      r$   rX  zABSLHandler.use_absl_log_file%  s!   € ØÔ×+Ò+¨L¸'ÑBÔBÐBÐBÐBr%   c                 ó<   — | j                              ||¦  «         d S r   )ru  rU  rW  s      r$   rU  z!ABSLHandler.start_logging_to_file(  s!   € ØÔ×/Ò/°¸gÑFÔFÐFÐFÐFr%   rm  )r;   r<   r=   r>   r   rŽ   rF  r]  rå   rk  r~  r?   rð   rr  rX  rU  rA   rB   s   @r$   ro  ro  þ  s   ø€ € € € € Ø3Ð3ð#ð #ð #ð #ð #ð0ð 0ð 0ð,ð ,ð ,ð'ð 'ð 'ð"ð "ð "ð"ð "ð "ð "ð "ðð ð ð ð ð  ñ „8ð ð1ð 1ð 1ðCð Cð Cð CðGð Gð Gð Gð Gð Gð Gð Gr%   ro  c                   ó"   ‡ — e Zd ZdZˆ fd„Zˆ xZS )rG  z=Formatter class used by :class:`~absl.logging.PythonHandler`.c                 ó<  •— t           d         j        sWt           d         j        t          j        k    r7|j        t
          j        k    r"t          j        j	        t          j
        k    rd}nt          |¦  «        }|t          ¦   «                              |¦  «        z   S )zÐAppends the message from the record to the results of the prefix.

    Args:
      record: logging.LogRecord, the record to be formatted.

    Returns:
      The formatted string representing the record.
    rƒ   r}   r|   )r…   r*   r   Ú	ABSL_INFOr  r   r    r5   rð   rñ   rò   ró   r*  r   rŽ   )r    r%  Úprefixr#   s      €r$   rŽ   zPythonFormatter.format/  s}   ø€ õ 
Ð%Ô&Ô,ð +Ý
ˆkÔÔ ¥IÔ$7Ò7Ð7ØŒ'œ,Ò&Ð&ÝÔ$Ô+­s¬zÒ9Ð9Ø€f€få" 6Ñ*Ô*€fØ
•E‘G”G—N’N 6Ñ*Ô*Ñ
*Ð*r%   )r;   r<   r=   r>   rŽ   rA   rB   s   @r$   rG  rG  ,  s>   ø€ € € € € ØEÐEð+ð +ð +ð +ð +ð +ð +ð +ð +r%   rG  c                   ó†   ‡ — e Zd ZdZ e¦   «         Zdd„Zd„ Z d„ Zd „ Z	d„ Z
d	„ Z
d
„ Zd
„ Z
ˆ fd„Zd
„ Zedd„¦   «         Zˆ xZS )r2  aø  A logger that will create LogRecords while skipping some stack frames.

  This class maintains an internal list of filenames and method names
  for use when determining who called the currently executing stack
  frame.  Any method names from specific source files are skipped when
  walking backwards through the stack.

  Client code should use the register_frame_to_skip method to let the
  ABSLLogger know which method from which file should be
  excluded from the walk backwards through the stack.
  Fr
   c                 ó  — t           j        }t          j        d¦  «        }d}|rR|j        }t
          |j        vr4|j        |j         |j        f|vr|j        |j         f|vr|}|dz  }|dk    rn	|j	        }|°R|ˆd} |ret          j
        ¦   «         }|                     d¦  «         t          j        ||¬¦  «         |                     ¦   «                              d ¦  «        } |j        j        |j        |j        j         | fS dS )a2  Finds the frame of the calling method on the stack.

    This method skips any frames registered with the
    ABSLLogger and any methods from this file, and whatever
    method is currently being used to generate the prefix for the log
    line.  Then it returns the file name, line number, and method name
    of the calling method.  An optional fourth item may be returned,
    callers who only need things from the first three are advised to
    always slice or index the result rather than using direct unpacking
    assignment.

    Args:
      stack_info: bool, when True, include the stack trace as a fourth item
        returned.  On Python 3 there are always four items returned - the fourth
        will be None when this is False.  On Python 2 the stdlib base class API
        only returns three items.  We do the same when this new parameter is
        unspecified or False for compatibility.
      stacklevel: int, if greater than 1, that number of frames will be skipped.

    Returns:
      (filename, lineno, methodname[, sinfo]) of the calling method.
    r    Nr
   r   zStack (most recent call last):
)Úfileú
)r2  Ú_frames_to_skiprò   Ú	_getframer«   Ú_LOGGING_FILE_PREFIXr¬   r/  r0  r¨   ÚioÚStringIOrc  Ú	tracebackÚ
print_stackÚgetvalueÚrstripr­   )	r    Ú
stack_infoÚ
stacklevelÚ	f_to_skipÚframeÚframe_to_returnÚcodeÚsinfoÚouts	            r$   r¿   zABSLLogger.findCallerP  s1  € õ. Ô*€Iõ 
ŒM˜!ÑÔ€EØ€Oà
ð 
Ø
Œ\€dÝ
 dÔ&6Ð
6Ð
6Ø
Ô
˜Tœ\Ø
Ô
ð
 Ø'0ð
1ð 
1à
Ô
˜Tœ\Ð
*°)Ð
;Ð
;ØˆØa‰ˆ
Ø
˜Š?ˆ?Ø
ØŒl€eð 
ð 
ð Ð "Ø€eØ	ð  ,ÝŒk‰mŒmˆØ
	Š	Ð4Ñ5Ô5Ð5ÝÔ˜e¨#Ð.Ñ.Ô.Ð.Ø—’‘”×%Ò% dÑ+Ô+ˆà
Ô
 Ô
,Ø
Ô
"Ø
Ô
 Ô
(Ø
ð	ð  ð ˆ4r%   c                 ó>   —  | j         t          j        |g|¢R i |¤Ž dS )z/Logs ``msg % args`` with severity ``CRITICAL``.N)r“   r   ÚCRITICAL©r    r–   r!   r"   s       r$   ÚcriticalzABSLLogger.critical‰  s/   € à€D„HWÔ
˜sÐ4 TÐ4Ð4Ð4¨VÐ4Ð4Ð4Ð4Ð4r%   c                 ó>   —  | j         t          j        |g|¢R i |¤Ž dS )z,Logs ``msg % args`` with severity ``FATAL``.N)r“   r   r”   rŸ  s       r$   r   zABSLLogger.fatal  ó.   € à€D„HWŒ]˜CÐ1 $Ð1Ð1Ð1¨&Ð1Ð1Ð1Ð1Ð1r%   c                 ó>   —  | j         t          j        |g|¢R i |¤Ž dS )z,Logs ``msg % args`` with severity ``ERROR``.N)r“   r   r˜   rŸ  s       r$   r   zABSLLogger.error‘  r¢  r%   c                 ót   — t          j        dt          d¦  «          | j        t          j        |g|¢R i |¤Ž dS )z+Logs ``msg % args`` with severity ``WARN``.z6The 'warn' method is deprecated, use 'warning' insteadr    N)r   r   rž   r“   r   ÚWARNrŸ  s       r$   r   zABSLLogger.warn•  sJ   € å„MÐJÝ$ añ)ô )ð )à€D„HWŒ\˜3Ð0 Ð0Ð0Ð0¨Ð0Ð0Ð0Ð0Ð0r%   c                 ó>   —  | j         t          j        |g|¢R i |¤Ž dS )z.Logs ``msg % args`` with severity ``WARNING``.N)r“   r   r›   rŸ  s       r$   r   zABSLLogger.warning›  s.   € à€D„HWŒ_˜cÐ3 DÐ3Ð3Ð3¨FÐ3Ð3Ð3Ð3Ð3r%   c                 ó>   —  | j         t          j        |g|¢R i |¤Ž dS )z+Logs ``msg % args`` with severity ``INFO``.N)r“   r   r    rŸ  s       r$   r   zABSLLogger.infoŸ  s.   € à€D„HWŒ\˜3Ð0 Ð0Ð0Ð0¨Ð0Ð0Ð0Ð0Ð0r%   c                 ó>   —  | j         t          j        |g|¢R i |¤Ž dS )z,Logs ``msg % args`` with severity ``DEBUG``.N)r“   r   r4   rŸ  s       r$   r   zABSLLogger.debug£  r¢  r%   c                 ó¤   •— |t           j        k    r |                     di ¦  «        }d|t          <    t	          ¦   «         j        ||g|¢R i |¤Ž dS )a  Logs a message at a cetain level substituting in the supplied arguments.

    This method behaves differently in python and c++ modes.

    Args:
      level: int, the standard logging level at which to log the message.
      msg: str, the text of the message to log.
      *args: The arguments to substitute in the message.
      **kwargs: The keyword arguments to substitute in the message.
    ÚextraTN)r   r”   rµ   r>  r   r“   ) r    rP   r–   r!   r"   rª  r#   s          €r$   r“   zABSLLogger.log§  sa   ø€ ð 
• ”
Ò Ð ð ×Ò  ¨Ñ,Ô,€eØ#€eOÑØ…EG„G„KsÐ,˜TÐ,Ð,Ð, VÐ,Ð,Ð,Ð,Ð,r%   c                 ó^   — |                       |¦  «        r|                      |¦  «         dS dS )aç  Calls handlers without checking ``Logger.disabled``.

    Non-root loggers are set to disabled after setup with :func:`logging.config`
    if it's not explicitly specified. Historically, absl logging will not be
    disabled by that. To maintaining this behavior, this function skips
    checking the ``Logger.disabled`` bit.

    This logger can still be disabled by adding a filter that filters out
    everything.

    Args:
      record: logging.LogRecord, the record to handle.
    N)r}  ÚcallHandlersrv  s     r$   r~  zABSLLogger.handleº  s<   € ð ‡{‚{6Ñ Ô ð  Ø
×Ò˜ÑÔÐÐÐð ð  r%   Nc                 ó€   — || j                              |||f¦  «         dS | j                              ||f¦  «         dS )a‹  Registers a function name to skip when walking the stack.

    The :class:`~absl.logging.ABSLLogger` sometimes skips method calls on the
    stack to make the log messages meaningful in their appropriate context.
    This method registers a function from a particular file as one
    which should be skipped.

    Args:
      file_name: str, the name of the file that contains the function.
      function_name: str, the name of the function to skip.
      line_number: int, if provided, only the function with this starting line
          number will be skipped. Otherwise, all functions with the same name
          in the file will be skipped.
    N)rŒ  Úadd)Úclsr6  Ú
function_nameÚ
line_numbers       r$   r3  z!ABSLLogger.register_frame_to_skipË  sP   € ð  Ð Ø	Ô×Ò˜y¨-¸ÐEÑFÔFÐFÐFÐFà	Ô×Ò˜y¨-Ð8Ñ9Ô9Ð9Ð9Ð9r%   )Fr
   r   )r;   r<   r=   r>   ÚsetrŒ  r¿   r   r   r   r   r   r   r   r“   r~  Ú
classmethodr3  rA   rB   s   @r$   r2  r2  B  sü   ø€ € € € € ð
ð 
ð C‘E”E€/ð7ð 7ð 7ð 7ðr5ð 5ð 5ð2ð 2ð 2ð2ð 2ð 2ð1ð 1ð 1ð4ð 4ð 4ð1ð 1ð 1ð2ð 2ð 2ð-ð -ð -ð -ð -ð& ð  ð  ð" ð:ð :ð :ñ „;ð:ð :ð :ð :ð :r%   r2  c                  ó<   — t          j        ¦   «         } | t          z  S )a[  Gets id of current thread, suitable for logging as an unsigned quantity.

  If pywrapbase is linked, returns GetTID() for the thread ID to be
  consistent with C++ logging.  Otherwise, returns the numeric thread id.
  The quantities are made unsigned by masking with 2*sys.maxint + 1.

  Returns:
    Thread ID unique to this process (unsigned)
  )Ú	threadingÚ	get_identÚ_THREAD_ID_MASK)Ú	thread_ids    r$   r"  r"  á  s   € õ Ô!Ñ#Ô#€)Ø	•_Ñ	$Ð$r%   c                  ó"   — t           €J ‚t           S )z!Returns the absl logger instance.)r1   rT   r%   r$   r¾   r¾   ï  s   € å	Ð	!Ð	!Ð	!Ý	Ðr%   c                  ó"   — t           €J ‚t           S )z"Returns the absl handler instance.)r5   rT   r%   r$   rä   rä   õ  s   € å	Ð	"Ð	"Ð	"Ý	Ðr%   c                 ól   — t          ¦   «                              ¦   «          | st          d¦  «         dS dS )z{Uses the python implementation of the logging code.

  Args:
    quiet: No logging message about switching logging type.
  zRestoring pure python loggingN)rä   rr  r   )Úquiets    r$   Úuse_python_loggingr½  û  sC   € õ ÑÔ×,Ò,Ñ.Ô.Ð.Ø	ð *ÝÐ	(Ñ)Ô)Ð)Ð)Ð)ð*ð *r%   c                  ó–  — t           sAd„ t          j        j        D ¦   «         } | D ]!}t          j                             |¦  «         Œ"da t
          ¦   «         }|t          j        j        vr_t          j                             |¦  «         t          d                              ¦   «          t          d          	                    ¦   «          dS dS )z•Uses the ABSL logging handler for logging.

  This method is called in :func:`app.run()<absl.app.run>` so the absl handler
  is used in absl apps.
  c                 óp   — g | ]3}t          |t          j        ¦  «        r|j        t          j        k    ¯1|‘Œ4S rT   )r[   r   Ú
StreamHandlerrñ   rò   ró   )rV   Úhs     r$   rX   z$use_absl_handler.<locals>.<listcomp>  sJ   € ð Lð Lð LØÝ
aÔ.Ñ
/Ô
/ðLà45´HÅÄ
Ò4JÐ4Jð 	
Ø4JÐ4JÐ4Jr%   Tr}   r   N)
Ú+_attempted_to_remove_stderr_stream_handlersr   r6   r7   Ú
removeHandlerrä   Ú
addHandlerr…   r-   rK   )r7   rÁ  Úabsl_handlers      r$   Úuse_absl_handlerrÆ  	  sÑ   € õ 
5ð 
7ð
Lð LÝ”<Ô(ðLñ Lô L€Hð ð $ð $ˆÝ
„l× Ò  Ñ#Ô#Ð#Ð#Ø26Ð/å!Ñ#Ô#€,ØœÔ.Ð.Ð.Ý
„L×Ò˜LÑ)Ô)Ð)Ý	ˆ+Ô×-Ò-Ñ/Ô/Ð/Ý	ˆ/Ô×0Ò0Ñ2Ô2Ð2Ð2Ð2ð  /Ð.r%   c                  óú   — t           rdS t          j        ¦   «         } t          j        t          ¦  «         t          j        d¦  «        a t          j        | ¦  «         t
          ¦   «         }t          |¦  «        adS )z!Initializes loggers and handlers.NÚabsl)	r1   r   ÚgetLoggerClassÚsetLoggerClassr2  rN   rG  ro  r5   )Úoriginal_logger_classrs  s     r$   Ú
_initializerÌ  #  sq   € õ ð 
Ø
€Få!Ô0Ñ2Ô2ÐÝ	ÔÑ$Ô$Ð$ÝÔ" 6Ñ*Ô*€,Ý	ÔÐ.Ñ/Ô/Ð/å,Ñ.Ô.ÐÝÐ6Ñ7Ô7€-€-€-r%   rm  r   )F)wr>   r^   r   r  r  r¦   r¶   r   rû   r  Ústructrò   r
  rµ  r  rÇ   r‘  Útypesr   rÈ  r   Úabsl.loggingr   Útypingr   Ú
ImportErrorr…   rÚ   r”   Ú
ABSL_ERRORr˜   ÚABSL_WARNINGr›   r¥  r†  r    r2   r4   ÚABSL_LOGGING_PREFIX_REGEXÚcalcsizer·  r>  r  rü   ri   rŽ  r1   r5   rt   rq   ÚFlagr   rD   rn   rF   rG   rl   ÚDEFINE_booleanÚ
LOGTOSTDERRÚALSOLOGTOSTDERRÚ
DEFINE_stringÚgetenvÚ LOG_DIRÚ
DEFINE_flagÚ	VERBOSITYÚ
LOGGER_LEVELSÚSTDERRTHRESHOLDÚSHOWPREFIXFORINFOr†   r‹   r‘   r   r   r   r   r   r   r¤   r±   r´   r¹   rÅ   rÉ   rÎ   rÒ   rÔ   rÁ   r“   rÞ   rá   rå   rç   rê   rì   Ú
level_warnrî   rö   r
  r   r*  r9  r  rB  rb  rÀ  rD  Ú Handlerro  Ú	FormatterrG  rÉ  r2  r"  r¾   rä   r½  rÂ  rÆ  rÌ  rT   r%   r$   ú<module>rå     sÚ   ðð>ð >ð@ Ð Ð Ð Ø Ð Ð Ð Ð Ð Ø €€€Ø 	€	€	€	Ø €€€Ø Ð Ð Ð Ø €€€Ø 	€	€	€	Ø 
€
€
€
Ø 
€
€
€
Ø 
€
€
€
Ø €€€Ø Ð Ð Ð Ø 
€
€
€
Ø 
€
€
€
Ø Ð Ð Ð Ø €€€Ø €€€à Ð Ð Ð Ð Ð Ø "Ð "Ð "Ð "Ð "Ð "ð ØÐÐÐÐÐÐøØ ð  ð  ð  Ø€$ð øøøð
 	Œ
€ð 	Ô€ØÔ€Ø
Ô
 € Ø Ô €Ø Ô €ØÔ€ð7ð ð ˜˜œ¨Ñ,Ô,¨qÑ0Ñ1°AÑ5€ð $€ð !Ð ð ”w—|’| I¨{Ñ;Ô;Ð ð €à€
ð ØØØØ
Ø
ð
 ð  Ð ð 
Ø	Ø	Ø	ð	ð Ð ð&0ð &0ð &0ð &0ð &0U”Zñ &0ô &0ð &0ðR.ð .ð .ð .ð .˜œ
ñ .ô .ð .ð8ð ð ð ð ˜%Ô.ñ ô ð ð&Hð Hð Hð Hð Hñ Hô Hð Hðð ð ð ð ˜5œ:ñ ô ð ðB #ˆeÔ"ØØ	Ø Øð	ñ ô €
ð '%Ô&ØØ	ØØð	ñ ô €ð 
ˆ%Ô
Ø
Ø
€B„Iˆm˜RÑ Ô Ø&Øð	
ñ 
ô 
€ ð 
ˆEÔØ€NØØ
ð
=ð
 Øð
ñ 
ô 
ñ

ô 

€	ð "Ô!ØÐØØ
ð
=ñ		ô 	ñ
ô 
€
ð $%Ô#ØÐØØð
ð ð
ñ 
ô 
ñô €ð  )EÔ(ØØð	&ñ		ô 	Ð ð"ð "ð "ð
ð ð ð$3ð 3ð 3ð.#ð #ð #ð#ð #ð #ð
%ð %ð %ð
%ð %ð %ð"ð "ð "ð
#ð #ð #ð
 $(ð 1ð 1ð 1ð 1ð 1ð
ð ð ð0 Ð ðKð Kð Kð 6;ð -ð -ð -ð -ð -ð2 Ð ðð ð ð2 FKð (ð (ð (ð (ð (ð, 6;ð 'ð 'ð 'ð 'ð 'ð*ð ð ð9ð 9ð 9ðD
#ð 
#ð 
#ð3ð 3ð 3ð2ð ð ð
"ð "ð "ð
!ð !ð !ð
$ð $ð $ð
 €
ð"ð "ð "ð
 !ð ð ð ð ð.,3ð ,3ð ,3ð ,3ð^Cð Cð Cð CðDð ð ð@$ð $ð $ðN?ð ?ð ?ð
;ð ;ð ;ð Ð ðEð Eð Eð Eð EGÔ)ñ Eô Eð EðP+Gð +Gð +Gð +Gð +G'”/ñ +Gô +Gð +Gð\+ð +ð +ð +ð +gÔ'ñ +ô +ð +ð,\:ð \:ð \:ð \:ð \:Ð'Ô'Ñ)Ô)ñ \:ô \:ð \:ð~
%ð 
%ð 
%ðð ð ðð ð ð*ð *ð *ð *ð /4Ð +ð3ð 3ð 3ð4
8ð 
8ð 
8ð  €

„
€
€
€
s   ÁA! Á!A)Á(A)
